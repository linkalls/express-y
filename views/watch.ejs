

<div class="container">
  <h1 class="text-2xl font-semibold"><%= title %></h1>
  <div class="video-wrapper">
    <video id="my-video" class="video-js vjs-default-skin" controls preload="auto">
      <source src="https://www.youtube.com/watch?v=<%= videoId %>" type="video/youtube" />
    </video>
    <audio id="audioPlayer" src="<%= audioUrl %>" type="audio/webm"></audio>
  </div>
  <div>
    <h2 class="text-xl font-semibold">Description</h2>
    <p><%- description %></p>
  </div>
  <div class="recommendations">
    <h2 class="text-xl font-semibold">Recommendations</h2>
    <ul>
      <% recommendations.forEach(recommendation => { %>
      <li>
        <a href="/watch?v=<%= recommendation.videoId %>">
          <img src="<%= recommendation.videoThumbnails[0].url %>" alt="<%= recommendation.title %>" style="width: 96px; height: 56px; object-fit: cover" />
          <span><%= recommendation.title %></span>
        </a>
      </li>
      <% }); %>
    </ul>
  </div>
</div>

<style>
  .container {
    display: flex;
    flex-direction: column;
    margin-top: 16px;
    margin-left: auto;
    margin-right: auto;
    width: 100%;
  }
  .video-wrapper {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
  }
  .video-js {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  .recommendations {
    margin-top: 16px;
  }
</style>

<script>
  var player = videojs("my-video", {
    techOrder: ["youtube"],
    plugins: {
      videoJsResolutionSwitcher: {
        default: "high",
        dynamicLabel: true,
      },
      httpSourceSelector: {},
      qualityLevels: {},
      markers: {
        markers: [
          { time: 9.5, text: "Marker 1" },
          { time: 16, text: "Marker 2" },
        ],
      },
      mobileUi: {},
      share: {},
      vr: {},
    },
  });

  const audioPlayer = document.getElementById("audioPlayer");
  let syncTimer;

  function syncAudioVideo() {
    if (Math.abs(player.currentTime() - audioPlayer.currentTime) > 0.1) {
      audioPlayer.currentTime = player.currentTime();
    }
  }

  function setupSync() {
    clearInterval(syncTimer);
    syncTimer = setInterval(syncAudioVideo, 100);
  }

  function pauseAudio() {
    audioPlayer.pause();
    clearInterval(syncTimer);
  }

  function playAudio() {
    audioPlayer.play().catch((error) => {
      console.error("Error playing audio:", error);
    });
    setupSync();
  }

  player.on("play", () => {
    audioPlayer.currentTime = player.currentTime();
    playAudio();
  });

  player.on("pause", () => {
    pauseAudio();
  });

  player.on("seeking", () => {
    audioPlayer.currentTime = player.currentTime();
  });

  player.on("waiting", () => {
    pauseAudio();
  });

  player.on("canplay", () => {
    playAudio();
  });

  player.on("ended", () => {
    pauseAudio();
  });

  audioPlayer.addEventListener("ended", () => {
    player.pause();
    clearInterval(syncTimer);
  });

  // ビデオプレーヤーの音声を無効にする
  player.muted(true);
</script>
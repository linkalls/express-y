<div class="container mx-auto mt-4 flex flex-col lg:flex-row">
  <div class="flex-1">
    <h1 class="text-2xl font-semibold mt-4 mb-4"><%= title %></h1>
    <div class="relative" style="padding-bottom: 56.25%;"> <!-- 16:9 aspect ratio -->
      <video id="videoPlayer" class="absolute top-0 left-0 w-full h-full" controls>
        <source src="<%= videoUrl %>" type="video/webm">
        Your browser does not support the video tag.
      </video>
      <audio id="audioPlayer" src="<%= audioUrl %>" type="audio/webm"></audio>
    </div>
    <div class="mt-4">
      <h2 class="text-xl font-semibold">Description</h2>
      <p class="mb-4"><%- description %></p>
    </div>
  </div>
  <div class="lg:w-1/3 lg:pl-4 mt-4 lg:mt-0 recommendations">
    <h2 class="text-xl font-semibold mb-2">Recommendations</h2>
    <ul class="space-y-2">
      <% recommendations.forEach(recommendation => { %>
        <li class="border-b pb-2">
          <a href="/watch?v=<%= recommendation.videoId %>" class="flex items-center space-x-2">
            <img src="<%= recommendation.videoThumbnails[0].url %>" alt="<%= recommendation.title %>" class="w-24 h-14 object-cover">
            <span><%= recommendation.title %></span>
          </a>
        </li>
      <% }); %>
    </ul>
  </div>
</div>

<script>
  const videoPlayer = document.getElementById('videoPlayer');
  const audioPlayer = document.getElementById('audioPlayer');
  let syncTimer;

  // 動画と音声を同期させる関数
  function syncAudioVideo() {
    if (Math.abs(videoPlayer.currentTime - audioPlayer.currentTime) > 0.1) {
      audioPlayer.currentTime = videoPlayer.currentTime;
    }
  }

  function setupSync() {
    clearInterval(syncTimer);
    syncTimer = setInterval(syncAudioVideo, 100);
  }

  function pauseAudio() {
    audioPlayer.pause();
    clearInterval(syncTimer);
  }

  function playAudio() {
    audioPlayer.play();
    setupSync();
  }

  videoPlayer.addEventListener('play', () => {
    audioPlayer.currentTime = videoPlayer.currentTime;
    playAudio();
  });

  videoPlayer.addEventListener('pause', () => {
    pauseAudio();
  });

  videoPlayer.addEventListener('seeking', () => {
    audioPlayer.currentTime = videoPlayer.currentTime;
  });

  videoPlayer.addEventListener('waiting', () => {
    pauseAudio();
  });

  videoPlayer.addEventListener('canplay', () => {
    playAudio();
  });

  videoPlayer.addEventListener('ended', () => {
    pauseAudio();
  });

  audioPlayer.addEventListener('ended', () => {
    videoPlayer.pause();
    clearInterval(syncTimer);
  });
</script>
